[{"content":"If you are landing on this page you probably already know what SSH is and how to use it through CLI. If not, take a quick look here. In general SSH is the most common tool people use to connect to remote systems and servers.\nUsually, in the beginning, people start with simple ssh \u0026lt;user\u0026gt;@\u0026lt;host\u0026gt; CLI usage. With time, using more and more advanced options, the commands become lengthy and clumsy resulting in a mess that are hard or impossible to remember.\nLet\u0026rsquo;s give you an example:\n# My SSH life begins here ssh user@host # That was easy :) # Then some person decides to enforce security through obscurity ssh user@this.is.a.super.long.host.that.is.hard.to.remember.private.com # Eh mate, you can do better ;) # Then the same person decides to change the default port ssh -p 43571 user@this.is.a.super.long.host.that.is.hard.to.remember.private.com # I am pretty good at numerology X) # That's not enough, so let's disable password auth and # enforce public/private key authentication only ssh -p 43571 -i /where/the/heck/is/my/private/key user@this.is.a.super.long.host.that.is.hard.to.remember.private.com # Grr... :| # somebody from the infra team: # \u0026quot;Mmm, the security team asked us to put everything in a private network # and you will need an access the server through our jump server\u0026quot; ssh -J jumbo@this.is.another.obscure.host.private.jump.com:62891 -i /where/the/heck/is/my/private/key -p 43571 user@this.is.a.super.long.host.that.is.hard.to.remember.private.com # Just shut up and teach me about the SSH config file! :@ Remembering dictionary information nowadays should be considered a crime! So what you can do to make yourself a proper citizen of the world?\nSSH config on the rescue SSH utilities have a metaverse of options and tools, so let\u0026rsquo;s try to utilize them and simplify our work! One of them is the SSH config. The SSH config is a configurational file, usually stored at ~/.ssh/config where you can pre-configure hosts and access configuration that you use frequently and simplify the access shown above to:\n# access the 'this.is.a.super.long.host.that.is.hard.to.remember.private.com' ssh test # access the non-default-port (43571) on you-know-which-host ssh ci # access the production for f@ck sake! ssh prod Setup  Check whether you have ~/.ssh/config on your local setup. If the file does not exist, let\u0026rsquo;s create it! NOTE: ~(tilda) means the home directory of the current user. Open the file with a text editor (vim, emacs, VSCode, nano, etc\u0026hellip;) Write down:  Host \u0026lt;alias\u0026gt; Hostname \u0026lt;[host|ip]\u0026gt; # mandatory Port \u0026lt;port\u0026gt; # optional User \u0026lt;username\u0026gt; # optional | nice-to-have IdentityFile \u0026lt;path/to/identity_file\u0026gt; # optional | nice-to-have ProxyJump \u0026lt;[host|ip]_of_jump_server\u0026gt; # optional Replace the mandatory placeholders and remove the unused ones Save the file  Where:\n Hostname \u0026lt;[host|ip]\u0026gt; - the DNS host or IP address of the target server Port \u0026lt;port\u0026gt; - you can skip this if the target server runs SSH on the default 22 port. Otherwise, you will need to state it User \u0026lt;username\u0026gt; - the name of the remote user on the target server you want to connect with. NOTE: Default is your local machine username IdentifyFile \u0026lt;/path/to/identity_file\u0026gt; - this is the path to the private key you use to connect to the target server. NOTE: Default is ~/.ssh/id_rsa or an iteration of the files within ~/.ssh directory ProxyJump \u0026lt;[host|ip]_of_jump_server - if you want to connect to a target server using a jump server, you should specify its DNS host or IP address here.  There are a ton of other options which you can explore here\nUsage and Access # My SSH life begins again ssh test # This time way easier ssh ci # So easy that I may run 'rm -rf /*' to spice it up a bit ssh prod If you have configured everything properly you should be connected to the target server with a clean and easy-to-remember CLI. üéä\nTroubleshooting In case the setup does not work, there are a few things you can inspect:\n ‚úèÔ∏è Make sure you saved ~/.ssh/config üîé Check for typos within the ~/.ssh/config ‚òéÔ∏è If using DNS records for hostname configuration, inspect whether your setup can resolve them nslookup \u0026lt;host\u0026gt; üîå If you are not sure whether the configured port is open you can always run nc -G 1 \u0026lt;host|ip\u0026gt; \u0026lt;port\u0026gt;, where -G 1 is one second of timeout. If the operation times out, most probably the port is not open. üñ®Ô∏è Check for network access to the target server ping \u0026lt;host\u0026gt;. NOTE: Sometimes admins disable ping, so it may not work. You can use traceroute in that case. üîì In case of WARNING: UNPROTECTED PRIVATE KEY FILE! run chmod 0600 /path/to/private/key  Wrap-up In the beginning, it may seems an overkill to maintain your SSH config file. But with time and exposure to more servers you will eventually end up using SSH config anyway.\nIn the end - What if you want to create another host for access. Just repeat the steps above and enjoy your day! üéâ\n PS: If you have a friend who is struggling with SSH you can always share it with the links down-below ‚¨áÔ∏è\n","permalink":"https://thetooth.io/blog/ssh_access/","summary":"If you are landing on this page you probably already know what SSH is and how to use it through CLI. If not, take a quick look here. In general SSH is the most common tool people use to connect to remote systems and servers.\nUsually, in the beginning, people start with simple ssh \u0026lt;user\u0026gt;@\u0026lt;host\u0026gt; CLI usage. With time, using more and more advanced options, the commands become lengthy and clumsy resulting in a mess that are hard or impossible to remember.","title":"SSH access made easy üìü"},{"content":"Init blogpost üé¨\necho Hello World ","permalink":"https://thetooth.io/blog/thebeginning/","summary":"Init blogpost üé¨\necho Hello World ","title":"The Beginning"}]